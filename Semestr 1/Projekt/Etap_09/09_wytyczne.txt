Rysowanie

-- Wstęp
Technologia WinForms domyślnie wspiera podstawowe metody generowania grafiki oparte o technolgię GDI+
Technologia ta udostępnia bardzo prosty interfejs umożliwiający wykonywanie podstawowych operacji rysowania obiektów
graficznych jak również i drukowanie tekstu.
Aplikacje WinForms nie uzyskują bezpośredniego dostępu do urządzeń graficznych, biblioteka GDI+ stanowi pośrednik
wchodzący w inerakcje ze sterownikami graficznymi itp.


-- Podstwowy
-- obszar rysowania
Ogólnie rzecz biorą rysować da się po każdym elemencie interfejsu. Najpopularniejszym podejściem jest jednak rysowanie po
kontrolce PictureBox lub Panel. Kontrolki te udostępniają zdarzenie OnPaint, które w łatwy sposób pozwala odwołać się do
elementu Graphics, który jest naszym punktem dostępowym do interfejsu GDI+.
Dodatkowo kontrolki te umożliwiają umiarkowanie łatwą możliwośc ustawienia podwójnego buforowania, które znacząco redukuje
migotanie interfejsu podczas jego odrysowywania.
Dostęp do elementu Graphics:

private void panel1_Paint(object sender, PaintEventArgs e)
{
   e.Graphics.DrawRectangle(pen, rectangle);
}


-- pióra i pędzle
Podstawowe elementy potrzebne do rysowania to pióro i pędzel. Pióro wykorzystywane jest do ryzowania różnego rodzaju linii,
obrysów, kształtów, itp. Pędzel z kolei wykorzystywany jest do wszelkich wypełnień kształtów kolorem ale również do drukowania tekstów.
Przykładowe implementacje:

Pen pen = new Pen(Color.Black, 1);
SolidBrush solidBrush = new SolidBrush(Color.Black);

Jak widać pen, poza kolorem, pozwala również zdefiniować grubość linii.

Warto pamiętać, że inicjalizacja piór i pędzli jest dość kosztowną operacją. Jeżeli jest to możliwe warto jest zainicjalizować
wszystkie obiekty tego typu gdzieś "na boku", a w procesie rysowania jedynie się do nich odwoływać.


-- rysowanie linii i kształtów
Interfejs GDI+ udostępnia szereg prostych, gotowych do wykorzystania operacji drukowania predefiniowanych elementow. Wszystkie
operacje tego typu jako parametr przyjmują współrzędne X i Y w różnym formacie, oraz w razie potrzeby dodatkowe parametry jak np.
rozmiar.

Rysowanie odbywa się poprzez wkazywanie odpowiednich punktów oraz wymiarów na osiach X i Y. Dość mało intuicyjne może wydawać się,
że punkt zerowy (0, 0) osadzony jest w lewym górnym narożniku. Określenie współrzednych na przykład (100, 200) oznaczać będzie punkt
oddalony o 100 pikseli od lewej krawędzi oraz 200 pikseli od górnej krawędzi.

Przykładowe operacje rysowania linii i kształtów:

e.Graphics.DrawLine(pen, x1, y1, x2, y2);

Powyższa metoda narysuje linię przy pomocy pióra zdefinionego w obiekcie "pen". Obiekt ten zadecyduje np. o kolorze oraz grubości linii.
Linia zostanie narysowana od punktu o współrzędnych (x1, y1) do punktu (x2, y2).
            
e.Graphics.DrawRectangle(pen, x, y, width, height);

Powyższa metoda narysuje prostokąt przy pomocy pióra zdefinionego w obiekcie "pen". Obiekt ten zadecyduje np. o kolorze oraz grubości linii.
Prostokąt zostanie umieszczony tak, że jego lewy górny narożnik będzie znajdował się w lokalizacji (x, y), szerokość (rozmiar "w prawo") równy
będzie wartości "width", a wysokość (rozmiar "w dół") równa wartości "height".

Tak narysowany prostokąt będzie jedynie ramką. Nie będzie posiadał wypełnienia. Jeżeli chcielibyśmy, by prostokąt był wypełniony
należy korzystać nie z metody "Draw" a z odpowiadajacej metody "Fill". W takim wypadku zamiast obiektu pióra należy podać obiekt pędzla:

e.Graphics.FillRectangle(solidBrush, x, y, width, height);

Interfejs GDI+ posiada metody do rysowania innych kształtów, jak koła lub poligony.


-- rysowanie tekstu
Rysowanie tekstu niewiele różni się od rysowania innych kształtów. Do rysowania tekstu należy korzystać z obietu pędzla. Konieczne również
będzie podanie czcionki:

FontFamily fontFamily = new FontFamily("Times New Roman");
Font myFont = new Font(fontFamily, 18, FontStyle.Regular);

Inicjalizacja tych onbiektów rónież w miarę możliwości powinna odbywać się tylko raz, a w procesie rysowania powinno następować jedynie odwołanie
do przygotowanego wcześniej obiektu. Samo rysowanie tekstu odbywa się z wykorzystaniem metody:

e.Graphics.DrawString(myText, myFont, solidBrush, x, y);

Metoda przyjmuje tekst do wydrukowania, czcionkę jaka ma zostać użyta, pędzel oraz współrzędne, w których tekst ma zostać wydrukowany.

Jak widać metoda ta choć wygodna niesie ze sobą kilka niedogodności. Jedną z nich jest fakt, że nie wiemy ile miejsca zajmie tekst,
co z kolei może powodować trudności w jego pozycjonowaniu. Na przykład gdybyśmy chcieli wyrównywać tekst do prawej krawędzi.
Do rozwiązania tego typu problemów skorzystać można z metody mierzącej zadany tekst:

e.Graphics.MeasureString(myText, myFont);

Metoda ta przyjmując zadany tekst i czcionkę zwróci obiekt zawierajacy informacje o wielkości obszaru, jaki zajmie tekst.


-- przeładowania metod
Zwróć uwagę, że wszystkie metody rysowania posiadają wiele opcji przeładowania. Często metody te są prostsze w zapisie,
przyjmują bowiem obiekty typu Size, Location, Point, Rectangle, itd.


-- wymuszenie odświeżenia kontrolki
Czasami potrzebne jest wymuszenie odświeżenia kontrolki i odrysowania jej zawartości od nowa. Wykorzystać do tego można metodę:

panel1.Refresh();



-- ZADANIE
---------------

Przeanalizuj kod okienka Wykres.cs.
Spróbuj dodać do niego operacje, które spowodują narysowanie na wykresie odpowiedniego tytułu.
Postaraj się, aby tekst rysowany był wyśrodkowany na wykresie, oraz by opdowiednio zachowywał się przy zmianie rozmiaru okna.
