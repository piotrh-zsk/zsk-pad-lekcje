Zmiana motywu aplikacji:

Na poprzednich zajęciach przygotowaliśmy dwa obiekty typu ResourceDictionary odpowiendio dla jasnego i ciemnego motywu.
Zmiana motywu w trakcie działania aplikacji będzie polegała na podmianie używanego słownika zasobów.

Aby łatwiej było to zrobić należy dodać kolejny poziom zagnieżdżenia w naszym słowniku zasobów w pliku App.xaml.
Do tej pory kod wyglądał tak:

    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="Themes/LightTheme.xaml"/>
                <!--<ResourceDictionary Source="Themes/HighContrastTheme.xaml"/>-->
            </ResourceDictionary.MergedDictionaries>

Należy zmodyfikować kod tak, by wyglądał tak:

    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary x:Name="ThemeDictionary">
                    <ResourceDictionary.MergedDictionaries>
                        <ResourceDictionary Source="/Themes/LightTheme.xaml"/>
                        <!--<ResourceDictionary Source="/Themes/HighContrastTheme.xaml"/>-->
                    </ResourceDictionary.MergedDictionaries>
                </ResourceDictionary>
            </ResourceDictionary.MergedDictionaries>

Jak widać dodany został kolejny poziom zagnieżdżenia słowników. Pozwala nam to na nadanie konkretnej nazwy dla tego słownika,
a co ważniejsze, będziemy mogli łatwo czyścić jego zawartość i ustawiać nową.

Następnym krokiem będzie dodanie procedury, która ową podmianę zasobów będzie wykonywała. Procedurę należy umieścić w pliku
App.xaml.cs. Procedura wygląda tak:


        public void ChangeTheme(string themeName)
        {
            if (themeName == "Light")
            {
                var resourceDictionary = Resources.MergedDictionaries[0];
                if (resourceDictionary != null)
                {
                    resourceDictionary.MergedDictionaries.Clear();
                    resourceDictionary.MergedDictionaries.Add(new ResourceDictionary() { Source = new Uri("pack://application:,,,/Themes/LightTheme.xaml") });
                }
            }
            else if (themeName == "Dark")
            {
                var resourceDictionary = Resources.MergedDictionaries[0];
                if (resourceDictionary != null)
                {
                    resourceDictionary.MergedDictionaries.Clear();
                    resourceDictionary.MergedDictionaries.Add(new ResourceDictionary() { Source = new Uri("pack://application:,,,/Themes/HighContrastTheme.xaml") });
                }
            }
        }

Procedura odwołuje się po indeksie do konkretnego słownika zasobów. Jako, że w naszym programie mamy tylko jeden, bierzemy pierwszy.
To, że dodaliśmy kolejny poziom zagnieżdżenia słowników sprawia, że nie musimy się zbytnio zastanawiać nad jego zawartością, możemy
po prostu wyczyścić całą jego zawartość a następnie dodać nowy zasób.

Warto zwrócić uwagę na strukturę ścieżki do pliku zasobów. WPF wymaga, by ścieżka taka była relatywna. W przypadku zasobów zawartych wewnątrz
aplikacji jako nasze główne authority wskazujemy samą aplikację, stąd segment:

application:

następna część ścieżki wskazuje już na konkretny plik xaml.

Mając procedurę musimy ją jeszcze wywołać. W tym celu dodajemy do głównego okna dwa radiobuttony:


            <Label Style="{StaticResource DefaultLabel}" FontWeight="Bold">Wybierz motyw aplikacji:</Label>
            <RadioButton Style="{StaticResource DefaultRadioButton}" GroupName="theme" IsChecked="True" Checked="RadioButton_Light_Checked">Jasny</RadioButton>
            <RadioButton Style="{StaticResource DefaultRadioButton}" GroupName="theme" Checked="RadioButton_Dark_Checked">Ciemny</RadioButton>


Oraz obsługę ich zdarzeń:


        private void RadioButton_Light_Checked(object sender, RoutedEventArgs e)
        {
            var app = (App)Application.Current;
            app.ChangeTheme("Light");
        }

        private void RadioButton_Dark_Checked(object sender, RoutedEventArgs e)
        {
            var app = (App)Application.Current;
            app.ChangeTheme("Dark");
        }