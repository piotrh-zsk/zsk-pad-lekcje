Zmiana motywu aplikacji:

Na poprzednich zajęciach przygotowaliśmy dwa obiekty typu ResourceDictionary odpowiendio dla jasnego i ciemnego motywu.
Zmiana motywu w trakcie działania aplikacji będzie polegała na podmianie używanego słownika zasobów.


Do tej pory kod w pliku App.xaml wyglądał tak:

    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="Themes/LightTheme.xaml"/>
                <!--<ResourceDictionary Source="Themes/HighContrastTheme.xaml"/>-->
            </ResourceDictionary.MergedDictionaries>

Mamy tam zdefiniowany nasz słownik styli. Dodamy w aplikacji metodę na podmianę go na inny.
Możesz wybrać np. radiobutton lub przycisk. 

Logika podmiany stylu:
1. Uszykowanie nowego ResourceDictionary z ustawieniem źróła na odpowiedni plik xaml
    
            var newDict = new ResourceDictionary();
            newDict.Source = new Uri("Themes/LightTheme.xaml", UriKind.Relative);

2. Wyczyszczenie zawartości słownika zasobów
    
            Application.Current.Resources.MergedDictionaries.Clear();

3. Dodanie nowego słownika zasobów
    
            Application.Current.Resources.MergedDictionaries.Add(newDict);



Warto zwrócić uwagę na strukturę ścieżki do pliku zasobów. WPF wymaga, by ścieżka taka była relatywna. W przypadku zasobów zawartych wewnątrz
aplikacji jako nasze główne authority wskazujemy samą aplikację, można to zdefiniować jako:

resourceDictionary.MergedDictionaries.Add(new ResourceDictionary() { Source = new Uri("pack://application:,,,/Themes/LightTheme.xaml") });

lub:

resourceDictionary.MergedDictionaries.Add(new ResourceDictionary() { Source = new Uri("Themes/LightTheme.xaml", UriKind.Relative) });


Mając procedurę musimy ją jeszcze wywołać. W tym celu dodajemy do głównego okna dwa radiobuttony:


            <Label Style="{StaticResource DefaultLabel}" FontWeight="Bold">Wybierz motyw aplikacji:</Label>
            <RadioButton Style="{StaticResource DefaultRadioButton}" GroupName="theme" IsChecked="True" Checked="RadioButton_Light_Checked">Jasny</RadioButton>
            <RadioButton Style="{StaticResource DefaultRadioButton}" GroupName="theme" Checked="RadioButton_Dark_Checked">Ciemny</RadioButton>


Oraz obsługę ich zdarzeń np jako:


        private void RadioButton_Light_Checked(object sender, RoutedEventArgs e)
        {
            var app = (App)Application.Current;
            app.ChangeTheme("Light");
        }

        private void RadioButton_Dark_Checked(object sender, RoutedEventArgs e)
        {
            var app = (App)Application.Current;
            app.ChangeTheme("Dark");
        }


lub używamy przycisku:

<Button x:Name="ThemeButton" Content="Change Theme" Click="ThemeButton_Click"/>

i sprawdzamy:

            var oldDict = Application.Current.Resources.MergedDictionaries.First();
            var newDict = new ResourceDictionary();
            if (oldDict.Source.OriginalString == "Themes/LightTheme.xaml")
            {
                ...
            }
            else
            {
                ...
            }